[
   {
      "id": "98a5d40d-885a-4ca8-9326-286948e4755d",
      "name": "generate_readme_files",
      "description": "Generate a README.C4Diagrammer.md file for each subdirectory that contains source code.",
      "version": "1.0",
      "systemPrompt": "You are a senior software developer, and summarise concepts succinctly for more junior developers to understand.",
      "userPrompt": "Use the C4Diagrammer tool to list all subdirectories of {rootDirectory}. Ignore any 'node_modules' subdirectories. Then recursively list the contents of each other subdirectory (apart from any 'node_modules' subdirectories) for {languages} files. If the subdirectory contains one or more {languages} files, call the C4Diagrammer tool \"should_regenerate_readme\" to see if the README file should be regenerated. If the README file should be regenerated, then read every {languages} file in the subdirectory, and create a {wordCount} word summary of the file in markdown format intended to brief new developers on its content. Accumulate all the summaries and write a concatenated summary into a file named README.C4Diagrammer.md in the same subdirectory, giving an absolute path to the tool.",
      "userPromptParameters": [
         {
            "name": "rootDirectory",
            "description": "The root directory to use to scan for source files in subdirectories and write documentation.",
            "required": true,
            "type": "kString"
         },
         {
            "name": "languages",
            "description": "The language(s) to direct the model to view as source code. The default is Typescript. Other languages can be specified, if you want multiple languages then use a comma separated list.",
            "required": false,
            "defaultValue": "Typescript",
            "type": "kString"
         },
         {
            "name": "wordCount",
            "description": "The number of words to use to summarise each code module. The default is 50.",
            "required": false,
            "defaultValue": "50",
            "type": "kNumber"
         }
      ]
   },
   {
      "id": "c2e3d50f-947b-4ae9-8d15-493a67c8901e",
      "name": "generate_component_c4_diagrams",
      "description": "Generate a C4Component.C4Diagrammer.md file for each subdirectory that contains source code.",
      "version": "1.0",
      "systemPrompt": "You are a senior software developer, and summarise concepts succinctly for more junior developers to understand.",
      "userPrompt": "Use the C4Diagrammer tool to list all subdirectories of {rootDirectory}. Ignore the 'node_modules' subdirectory. Then recursively seach each other subdirectory. If the subdirectory contains a file 'README.C4Diagrammer.md', then read the contents of the file, and generate a C4Component Mermaid.js diagram from the contents. Use the provided tools to parse and validate the generated diagram, and if it is valid, generate a preview, and write the markdown to a file named C4Component.C4Diagrammer.md in the same subdirectory, giving an absolute path to the tool.\nYour chain of thought:\n1) Use 'C4Component' for the diagram type (avoid 'C4_Component', PlantUML syntax, or any unrecognized element).\n2) Identify the primary user(s) and the main system element(s).\n3) If you see any non-standard C4 elements, convert them to valid Mermaid C4 elements like 'Person()', 'Container()', or 'System()'.\n4) Group related nodes in 'System_Boundary()' blocks if appropriate.\n5) Use 'System_Ext()' for external systems or services.\n6) Only create relationships ('Rel()') between valid elements — refer to components by ID (not just strings). Only use 'Rel', not 'Rel_Neighbor'. Link to nodes directly, not to 'System_Boundary()' blocks.\n7) Output only valid Mermaid code — no extra commentary or text —  which supports built-in rendering in markdown environments.\n8) Verify there are no lexical or syntax errors. If the markdown is not valid mermaid.js, try to diagnose the error using the parse tool and try again.",
      "userPromptParameters": [
         {
            "name": "rootDirectory",
            "description": "The root directory to use to scan for source files in subdirectories and write documentation.",
            "required": true,
            "type": "kString"
         }
      ]
   },
   {
      "id": "f8b4d62e-1c9a-4d37-b5f3-9e2a8c743f1d",
      "name": "generate_rollup_c4_diagram",
      "description": "Generate a C4 diagram of the specific type by aggregating the contents of all subdirectories.",
      "version": "1.0",
      "systemPrompt": "You are a senior software developer, and summarise concepts succinctly for more junior developers to understand.",
      "userPrompt": "Use the C4Diagrammer tool to list all subdirectories of {rootDirectory}. Ignore the 'node_modules' subdirectory. Then recursively search each other subdirectory for a file named 'README.C4Diagrammer.md'. Concatenate the contents of all these files, and generate a {c4Type} Mermaid.js diagram from the contexts. Use the provided tools to parse and validate the generated diagram, and if it is valid, generate a preview, and write the markdown to a file named {c4Type}.C4Diagrammer.md in the directory {rootDirectory}. Your chain of thought:\n1) Use {c4Type} for the diagram type (avoid 'C4_Component', PlantUML syntax, or any unrecognized element).\n2) Identify the primary user(s) and the main system element(s).\n3) If you see any non-standard C4 elements, convert them to valid Mermaid C4 elements like 'Person()', 'Container()', or 'System()'.\n4) Group related nodes in 'System_Boundary()' blocks if appropriate.\n5) Use 'System_Ext()' for external systems or services.\n6) Only create relationships ('Rel()') between valid elements — refer to components by ID (not just strings). Only use 'Rel', not 'Rel_Neighbor'. Link to nodes directly, not to 'System_Boundary()' blocks.\n7) Output only valid Mermaid code — no extra commentary or text —  which supports built-in rendering in markdown environments.\n8) Verify there are no lexical or syntax errors. If the markdown is not valid mermaid.js, try to diagnose the error using the parse tool and try again.",
      "userPromptParameters": [
         {
            "name": "rootDirectory",
            "description": "The root directory to use to scan for source files in subdirectories and write documentation.",
            "required": true,
            "type": "kString"
         },
         {
            "name": "c4Type",
            "description": "The type of C4 diagram to generate. C4Context, C4Container, C4Component, or C4Deployment",
            "required": true,
            "type": "kString"
         }
      ]
   }        
]